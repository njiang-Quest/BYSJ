/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.bysj.struts.action;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.bysj.bean.AppraisalBean;
import com.bysj.bean.MuserBean;
import com.bysj.bean.VoteAffixBean;
import com.bysj.bean.VoteBean;
import com.bysj.bean.VoteDetailBean;
import com.bysj.common.StringUtil;
import com.bysj.dao.VoteDao;
import com.bysj.struts.form.VoteForm;

/** 
 * MyEclipse Struts
 * Creation date: 05-09-2012
 * 
 * XDoclet definition:
 * @struts.action path="/vote" name="voteForm" input="/AddVote.jsp" parameter="action" scope="request" validate="true"
 * @struts.action-forward name="success" path="/VoteDetail.jsp"
 */
public class VoteAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	
	public ActionForward addVote(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		VoteForm voteForm = (VoteForm) form;// TODO Auto-generated method stub
		
		VoteBean vote = new VoteBean();
		vote.setTitle(StringUtil.toGB2312(voteForm.getTitle().trim()) );
		
		if(voteForm.getContext() != null && voteForm.getContext().trim() != null)
			vote.setContext(StringUtil.toGB2312(voteForm.getContext().trim()) );
			
		vote.setBeginTime(voteForm.getBeginTime().trim());
		
		if(voteForm.getEndTime() != null && voteForm.getEndTime().trim() !=null)
			vote.setEndTime(voteForm.getEndTime().trim());
		
		vote.setOptions(StringUtil.toGB2312(StringUtil.list2String(voteForm.getOptions())));
		
		vote.setOptional(Integer.parseInt(voteForm.getOptional()));
		
//		System.out.println("title:"+vote.getTitle());
//		System.out.println("context:"+vote.getContext());
		VoteDao voteDao = new VoteDao();
		if(voteDao.addVote(vote)){
			vote.setStatus(1);
			HttpSession session = request.getSession();
			session.setAttribute("currVote", vote);
			return mapping.findForward("success");
		}
		return mapping.findForward("fail");
	}
	
	public ActionForward getVotes(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		VoteDao voteDao = new VoteDao();
		List<VoteBean> votes = voteDao.getVotes();
		if(!votes.isEmpty()) {
			for(int i = 0; i< votes.size(); i++){
				VoteBean vote = votes.get(i);
				if(vote.getStatus()==0)
					vote.setStrStatus("已结束");
				else
					vote.setStrStatus("进行中");
			}
			HttpSession session = request.getSession();
			session.setAttribute("votes", votes);
			
			
//			if(request.getAttribute("visit")!=null)
				session.setAttribute("showDiv", "1");
//			else 
//				session.setAttribute("showDiv", "0");
//			
			try {
				response.sendRedirect("index.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else {
			try {
				response.sendRedirect("index.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return null;
	}
	
	public ActionForward currVote(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		int voteId = Integer.parseInt(request.getParameter("voteId"));
//		System.out.println("voteId:"+voteId);
		
		getCurrVote(voteId,request,response);
		return null;
	}
	
	public ActionForward do_vote(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		int voteId = Integer.parseInt(request.getParameter("voteId"));
		String option = StringUtil.toGB2312(request.getParameter("option"));
		String[] options = option.split(",");
//		session.setAttribute("options", option);//记录用户的选择,用于展示页面
		VoteDao voteDao = new VoteDao();
		int userid =( (MuserBean)session.getAttribute("currUser") ).getId();
//		System.out.println("userid:"+userid);
		boolean ok = false;
		for(String op:options)
			ok = voteDao.do_vote(voteId, op,userid);
		if(ok){
			getCurrVote(voteId,request,response);
		}	
		return null;
	}
	
	private void getCurrVote(int voteId,HttpServletRequest request, HttpServletResponse response){
		VoteDao voteDao = new VoteDao();
		
		HttpSession session = request.getSession();
		MuserBean user = (MuserBean)session.getAttribute("currUser") ;
		int userid = user.getId();
		user.setAlready_vote(voteDao.already_vote(voteId, userid));
		
//		System.out.println("already_vote:" + user.isAlready_vote());
		
		session.setAttribute("currUser", user);
		VoteBean currVote = voteDao.getCurrVote(voteId);
		if(currVote != null){
			currVote.setOptionList( currVote.getOptions().split(",") );
			
			Hashtable<String,String> affixs = new Hashtable<String,String>();
			List<VoteDetailBean> voteDetail_list = new ArrayList<VoteDetailBean>();
			for(int i =0;i<currVote.getOptionList().length;i++){
				VoteDetailBean voteDetail = null;
				voteDetail = voteDao.getVoteDetail(voteId, currVote.getOptionList()[i]);
				
				if(voteDetail==null) 
					voteDetail = new VoteDetailBean();
				
				voteDetail_list.add(voteDetail);
//				System.out.println("percentage:"+voteDetail.getPercentage());
				
				affixs = voteDao.getPath(voteId,currVote.getOptionList()[i],"vote",affixs);

			}
			currVote.setVoteDetail(voteDetail_list);
			currVote.setAffixFiles(affixs);
			System.out.println("keys"+affixs.keySet());
			System.out.println("keys"+affixs.values());
			
//			Map<String,String> affixs = voteDao.getAllPath(voteId);
//			Map<String,String> affixs = currVote.getAffixFiles();
//			if(!affixs.isEmpty()){
//				currVote.setAffixFiles(affixs);
//				session.setAttribute("affixs", affixs);
//				
//				System.out.println("keys"+affixs.keySet());
//				System.out.println("keys"+affixs.values());
//			}
			if(currVote.getStatus()==0)
				currVote.setStrStatus("已结束");
			else
				currVote.setStrStatus("进行中");
			session.setAttribute("currVote", currVote);
			session.setAttribute("optionList", currVote.getOptionList());
			session.setAttribute("affixs", currVote.getAffixFiles());
			try {
				response.sendRedirect("VoteDetail.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else {
			try {
				response.sendRedirect("pageNotAvailable.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	public ActionForward add_vote_affix(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		String path = StringUtil.toGB2312(request.getParameter("path"));
		String affixType = request.getParameter("affixType");
		System.out.println("path:"+path);
		System.out.println("affixType:"+affixType);
		String username = ((MuserBean)session.getAttribute("currUser")).getName();
		int id = 0;
		if(affixType.equals("app"))
			id = ((AppraisalBean)session.getAttribute("currApp")).getId();
		else
			id = ((VoteBean)session.getAttribute("currVote")).getVoteId();
		
		VoteAffixBean affix = new VoteAffixBean();
		affix.setPathName(path);
		affix.setAoption(username);
		affix.setVoteid(id);
		affix.setAffixType(affixType);
		
		VoteDao voteDao = new VoteDao();
		int count = voteDao.add_vote_affix(affix);
		if(count > 0)
			return mapping.findForward("add_vote_affix");
		
		return null;
	}
}